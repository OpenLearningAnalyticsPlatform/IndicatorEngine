/*
 * Open Learning Analytics Platform (OpenLAP) : Indicator Engine

 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package com.indicator_engine.indicator_system.Number;
import com.indicator_engine.model.indicator_system.Number.EntitySpecification
import com.indicator_engine.indicator_system.Number.ProcessUserFilters;
import java.util.List;

dialect  "mvel"

rule "When no entity filter is present"
when
    $indReference : String()
    EntitySpecification (currentIndicator.indicatorParameters.indicatorDataset.get($indReference).entityDisplayObjects.isEmpty() == true)
    $pFilter : ProcessUserFilters()
    $userParameter : EntitySpecification( $indparams : currentIndicator.indicatorParameters)
then
    $userParameter.getCurrentIndicator().getHqlQuery().put($indReference, "select event from OpenLAPEvent event" + $pFilter.processEntitiesFrom($indparams, $indReference) + " where "
							+ "event.action in (" + $pFilter.processStringList($indparams, "action", $indReference) + ") and "
							+ "event.platform in (" + $pFilter.processStringList($indparams, "platform", $indReference) + ") and "
							+ "event.source in (" + $pFilter.processStringList($indparams, "source", $indReference) + ") and "
							+ "event.categoryByCId.cId in (" + $pFilter.processIntegerList($indparams, "minor", $indReference) + ") "
							+ $pFilter.processTimestamp("event.timestamp", $indparams, $indReference)
							+ $pFilter.processEntitiesJoins("event.eventId", $indparams, $indReference)
							+ $pFilter.processEntitiesFilter($indparams, $indReference)
							+ $pFilter.processUserFilter("event", $indparams, $indReference));
end

rule "When any number of entity filters are present"
when
    $indReference : String()
    EntitySpecification (currentIndicator.indicatorParameters.indicatorDataset.get($indReference).entityDisplayObjects.isEmpty() == false)
    $pFilter : ProcessUserFilters()
    $userParameter : EntitySpecification( $indparams : currentIndicator.indicatorParameters)
then
    $userParameter.getCurrentIndicator().getHqlQuery().put($indReference, "select e1.eventByEventFk, e1 from OpenLAPEntity e1" + $pFilter.processEntitiesFrom($indparams, $indReference) + " where "
							+ "e1.eventByEventFk.action in (" + $pFilter.processStringList($indparams, "action", $indReference) + ") and "
							+ "e1.eventByEventFk.platform in (" + $pFilter.processStringList($indparams, "platform", $indReference) + ") and "
							+ "e1.eventByEventFk.source in (" + $pFilter.processStringList($indparams, "source", $indReference) + ") and "
							+ "e1.eventByEventFk.categoryByCId.cId in (" + $pFilter.processIntegerList($indparams, "minor", $indReference) + ") and "
							+ "e1.entityKey in (" + $pFilter.processStringList($indparams, "entityDisplay", $indReference) + ") "
							+ $pFilter.processTimestamp("e1.eventByEventFk.timestamp", $indparams, $indReference)
							+ $pFilter.processEntitiesJoins("e1.eventByEventFk.eventId", $indparams, $indReference)
							+ $pFilter.processUserFilter("e1.eventByEventFk", $indparams, $indReference)
							+ $pFilter.processEntitiesFilter($indparams, $indReference) + " order by e1.eventByEventFk.eventId");
end
